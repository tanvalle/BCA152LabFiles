/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  */
/* USER CODE END Header */

#include "main.h"
#include "stm32f4xx_hal.h"
#include <string.h>
#include <stdio.h>

/* LCD pin mapping */
#define LCD_RS_GPIO_Port GPIOA
#define LCD_RS_Pin GPIO_PIN_0
#define LCD_E_GPIO_Port  GPIOA
#define LCD_E_Pin        GPIO_PIN_1
#define LCD_D4_GPIO_Port GPIOA
#define LCD_D4_Pin       GPIO_PIN_2
#define LCD_D5_GPIO_Port GPIOA
#define LCD_D5_Pin       GPIO_PIN_3
#define LCD_D6_GPIO_Port GPIOA
#define LCD_D6_Pin       GPIO_PIN_4
#define LCD_D7_GPIO_Port GPIOA
#define LCD_D7_Pin       GPIO_PIN_5

/* Keypad row pins (inputs) */
#define ROW1_GPIO_Port GPIOD
#define ROW1_Pin       GPIO_PIN_11
#define ROW2_GPIO_Port GPIOB
#define ROW2_Pin       GPIO_PIN_10
#define ROW3_GPIO_Port GPIOB
#define ROW3_Pin       GPIO_PIN_11
#define ROW4_GPIO_Port GPIOD
#define ROW4_Pin       GPIO_PIN_12

/* Keypad column pins (outputs) */
#define COL1_GPIO_Port GPIOF
#define COL1_Pin       GPIO_PIN_7
#define COL2_GPIO_Port GPIOF
#define COL2_Pin       GPIO_PIN_6
#define COL3_GPIO_Port GPIOF
#define COL3_Pin       GPIO_PIN_5
#define COL4_GPIO_Port GPIOF
#define COL4_Pin       GPIO_PIN_4

/* Function prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void lcd_delay(uint32_t ms);
static void lcd_enable(void);
static void lcd_send4bit(uint8_t data);
static void lcd_send_cmd(uint8_t cmd);
static void lcd_send_data(uint8_t data);
static void lcd_init(void);
static void lcd_print(const char *str);
char scan_keypad(void);

/* Key map for 4x4 keypad */
const char keymap[4][4] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};


/* LCD Helper Functions */
static void lcd_delay(uint32_t ms)
{
    HAL_Delay(ms);
}

static void lcd_enable(void)
{
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
    lcd_delay(1);
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
    lcd_delay(1);
}

static void lcd_send4bit(uint8_t data)
{
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
    lcd_enable();
}

static void lcd_send_cmd(uint8_t cmd)
{
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
    lcd_send4bit(cmd >> 4);
    lcd_send4bit(cmd & 0x0F);
}

static void lcd_send_data(uint8_t data)
{
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
    lcd_send4bit(data >> 4);
    lcd_send4bit(data & 0x0F);
}

static void lcd_init(void)
{
    lcd_delay(50);
    lcd_send4bit(0x03);
    lcd_delay(5);
    lcd_send4bit(0x03);
    lcd_delay(5);
    lcd_send4bit(0x03);
    lcd_delay(5);
    lcd_send4bit(0x02);

    lcd_send_cmd(0x28); // 4-bit, 2-line, 5x8 font
    lcd_send_cmd(0x0C); // Display ON, Cursor OFF
    lcd_send_cmd(0x06); // Entry mode
    lcd_send_cmd(0x01); // Clear display
    lcd_delay(2);
}

static void lcd_print(const char *str)
{
    while (*str)
    {
        lcd_send_data(*str++);
    }
}


/* Keypad Scanning function */
char scan_keypad(void)
{
    GPIO_TypeDef* colPorts[4] = {COL1_GPIO_Port, COL2_GPIO_Port, COL3_GPIO_Port, COL4_GPIO_Port};
    uint16_t colPins[4] = {COL1_Pin, COL2_Pin, COL3_Pin, COL4_Pin};

    GPIO_TypeDef* rowPorts[4] = {ROW1_GPIO_Port, ROW2_GPIO_Port, ROW3_GPIO_Port, ROW4_GPIO_Port};
    uint16_t rowPins[4] = {ROW1_Pin, ROW2_Pin, ROW3_Pin, ROW4_Pin};

    for (int col = 0; col < 4; col++)
    {
        for (int c = 0; c < 4; c++)
            HAL_GPIO_WritePin(colPorts[c], colPins[c], GPIO_PIN_SET);

        HAL_GPIO_WritePin(colPorts[col], colPins[col], GPIO_PIN_RESET);
        HAL_Delay(1);

        for (int row = 0; row < 4; row++)
        {
            if (HAL_GPIO_ReadPin(rowPorts[row], rowPins[row]) == GPIO_PIN_RESET)
            {
                while (HAL_GPIO_ReadPin(rowPorts[row], rowPins[row]) == GPIO_PIN_RESET);
                return keymap[row][col];
            }
        }
    }
    return 0;
}


/* MAIN PROGRAM */
int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    lcd_init();

    lcd_send_cmd(0x80); // Move to line 1

    uint8_t pos = 0;

    while (1)
    {
        char key = scan_keypad();
        if (key)
        {
            if (key == '*') key = 'E';
            else if (key == '#') key = 'F';

            if (pos == 16)
                lcd_send_cmd(0xC0); // Line 2
            else if (pos == 32)
                continue; // Do nothing if full

            lcd_send_data(key);
            pos++;
        }
    }
}


/* System Clock Configuration */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;

    HAL_RCC_OscConfig(&RCC_OscInitStruct);
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
}


/* GPIO Initialization */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOF_CLK_ENABLE();

    // LCD GPIO
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
                             GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
                          GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Keypad Columns (Outputs)
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

    // Keypad Rows (Inputs with Pull-up)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}


void Error_Handler(void)
{
    __disable_irq();
    while (1) {}
}
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

